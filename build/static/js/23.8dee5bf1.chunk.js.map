{"version":3,"sources":["components/map/mapSection/KakaoMap.js","components/map/mapSection/icon_rstrn.png","components/map/mapSection/Card.js","components/map/mapSection/MapContainer.js"],"names":["window","kakao","Title","Typography","Text","withRouter","id","name","numAddress","roadAddress","lat","long","match","useDispatch","useState","setstate","history","useHistory","useLocation","markers","size","style","width","height","level","type","onClick","container","document","getElementById","options","center","maps","LatLng","map","Map","getLevel","setLevel","panTo","customOverlay1","CustomOverlay","position","content","yAnchor","createElement","className","content1","content2","appendChild","createTextNode","content3","title","onclick","setMap","content4","content5","content11","src","icon_rstrn","content6","content7","content8","content9","content10","push","pathname","path","state","setContent","marker","Marker","event","addListener","console","log","MapContainer","storeSeoul"],"mappings":"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","file":"static/js/23.8dee5bf1.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\n\nconst { kakao } = window;\n\nconst KakaoMap = () => {\n  const dispatcher = useDispatch();\n\n  useEffect(() => {\n    const container = document.getElementById('map');\n    const options = {\n      center: new kakao.maps.LatLng(37.59732049638715, 127.05882833955489), // 한국외대 설캠\n      level: 3,\n    };\n    const map = new kakao.maps.Map(container, options);\n\n\n\n  }, []);\n\n\n\n  return <div id=\"map\" />\n}\n\nexport default KakaoMap;\n\n\n/*\n\n// 장소 검색 객체를 생성합니다\nvar ps = new kakao.maps.services.Places();\n\n// 키워드로 장소를 검색합니다\nps.keywordSearch(searchPlace, placesSearchCB);\n\n// 키워드 검색 완료 시 호출되는 콜백함수 입니다\nfunction placesSearchCB (data, status, pagination) {\n    if (status === kakao.maps.services.Status.OK) {\n\n        // 검색된 장소 위치를 기준으로 지도 범위를 재설정하기위해\n        // LatLngBounds 객체에 좌표를 추가합니다\n        var bounds = new kakao.maps.LatLngBounds();\n\n        for (var i=0; i<data.length; i++) {\n            displayMarker(data[i]);\n            bounds.extend(new kakao.maps.LatLng(data[i].y, data[i].x));\n        }\n\n        // 검색된 장소 위치를 기준으로 지도 범위를 재설정합니다\n        map.setBounds(bounds);\n    }\n}\n*/\n\n","export default __webpack_public_path__ + \"static/media/icon_rstrn.48894827.png\";","import React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { Card, Button, Typography, Col, Row } from 'antd';\nimport { useHistory, withRouter, useLocation } from 'react-router-dom';\nimport Quick from '../../../views/Quick/Quick';\nimport Header from '../../../views/Header/Header';\nimport Footer from '../../../views/Footer/Footer';\nimport './Card.css';\nimport icon_rstrn from './icon_rstrn.png';\n\nconst { kakao } = window;\nconst { Text, Title } = Typography;\n\nconst Rstrn = ({ id, name, numAddress, roadAddress, lat, long, match }) => {\n  //const history = useHistory();\n\n  //const [markerPositions, setMarkerPositions] = useState();\n  //const { map } = useSelector((state) => ({ map: state.map }), []);\n  const dispatch = useDispatch();\n  const [state, setstate] = useState();\n  const history = useHistory();\n  const location = useLocation();\n  const [marker, setMarkers] = useState([]);\n\n  //const {map} = useSelector(state => state.map,[]);\n\n  //const infor = [image, title, author];\n  //let history = useHistory();\n  // 변수 초기값\n\n  var map = state;\n  var markers = [];\n\n  function displayMarker() {\n    //hideMarkers(markers);\n\n    const container = document.getElementById('map');\n    const options = {\n      center: new kakao.maps.LatLng(37.59732049638715, 127.05882833955489), // 한국외대 설캠\n      level: 3,\n    };\n    const map = new kakao.maps.Map(container, options);\n    setstate(map);\n\n    if (map.getLevel() >= 3) {\n      map.setLevel(3);\n      map.panTo(new kakao.maps.LatLng(lat + 0.001, long));\n    } else if (map.getLevel() === 2) {\n      map.panTo(new kakao.maps.LatLng(lat + 0.0005, long));\n    } else {\n      map.panTo(new kakao.maps.LatLng(lat + 0.0003, long));\n    }\n\n    var customOverlay1 = new kakao.maps.CustomOverlay({\n      map: map,\n      position: new kakao.maps.LatLng(lat, long),\n      content: content,\n      yAnchor: 1,\n    });\n\n    /*\n    var content = '<div class=\"wrap\">' +// \n            '    <div class=\"info\">' + //\n            '        <div class=\"title\">' + //\n            `            ${name}`+//\n            '            <div class=\"close\" onclick=\"closeOverlay()\" title=\"닫기\"></div>' + \n            '        </div>' + //\n            '        <div class=\"body\">' + \n            '            <div class=\"img\">' +\n            '                <img src=\"http://cfile181.uf.daum.net/image/250649365602043421936D\" width=\"73\" height=\"70\">' +\n            '           </div>' + //\n            '            <div class=\"desc\">' + //\n            '                <div class=\"ellipsis\">'+`${numAddress}`+\n            '</div>' + //\n            '                <div class=\"jibun ellipsis\">'+`${roadAddress}`+\n            '</div>' + //\n            '                <div><a href=\"http://www.kakaocorp.com/main\" target=\"_blank\" class=\"link\">홈페이지</a></div>' + \n            '           </div>' + \n            '        </div>' + \n            '    </div>' +    \n            '</div>';\n            \n           */\n\n    var content = document.createElement('div');\n    content.className = 'wrap'; //\n\n    var content1 = document.createElement('div');\n    content1.className = 'info';\n\n    var content2 = document.createElement('div');\n    content2.className = 'title';\n\n    content2.appendChild(document.createTextNode(name));\n\n    var content3 = document.createElement('div');\n    content3.className = 'close';\n    content3.title = '닫기';\n    content3.onclick = function () {\n      customOverlay1.setMap(null);\n    };\n    content2.appendChild(content3);\n    content1.appendChild(content2);\n\n    var content4 = document.createElement('div');\n    content4.className = 'body';\n\n    var content5 = document.createElement('div');\n    content5.className = 'img';\n\n    var content11 = document.createElement('img');\n    content11.src = icon_rstrn;\n    content11.width = '73';\n    content11.height = '70';\n\n    content5.appendChild(content11);\n    content4.appendChild(content5);\n\n    var content6 = document.createElement('div');\n    content6.className = 'desc';\n\n    var content7 = document.createElement('div');\n    content7.className = 'ellipsis';\n    content7.appendChild(document.createTextNode(numAddress));\n\n    content6.appendChild(content7);\n\n    var content8 = document.createElement('div');\n    content8.className = 'jibun ellipsis';\n    content8.appendChild(document.createTextNode(roadAddress));\n\n    var content9 = document.createElement('div');\n    var content10 = document.createElement('button');\n    content10.className = 'link';\n    content10.appendChild(document.createTextNode('상세 보기'));\n    content10.onclick = function () {\n      history.push({\n        pathname: `${match.path}/info/${name}/${id}`,\n        state: {\n          id: id,\n          name: name,\n          numAddress: numAddress,\n          roadAddress: roadAddress,\n        },\n      });\n      // history.pushState(query, '', `${match.path}/info/${name}`);\n    };\n    content9.appendChild(content10);\n\n    content6.appendChild(content8);\n\n    content6.appendChild(content9);\n\n    content6.appendChild(content8);\n\n    content6.appendChild(content9);\n\n    content4.appendChild(content6);\n\n    content1.appendChild(content4);\n    content.appendChild(content1);\n\n    customOverlay1.setContent(content);\n\n    /*\n\n    var content = document.createElement(\"div\");\n    content.className = \"overlaybox\";\n    var content1 = document.createElement(\"h1\");\n    content1.appendChild(document.createTextNode(name));\n    content.appendChild(content1);\n\n    var buttonContainer = document.createElement(\"div\");\n    buttonContainer.className = \"popup-buttons\";\n\n    var closeBtn = document.createElement(\"button\");\n    closeBtn.className = \"popup-button\";\n    closeBtn.appendChild(document.createTextNode(\"취소\"));\n    closeBtn.onclick = function () {\n      customOverlay1.setMap(null);\n    };\n    React.createElement('div', null,  'hello world')\n    var selectBtn = document.createElement(\"button\");\n\n    var temp_link = document.createElement(\"a\");\n    temp_link.className = \"popup-button\";\n    temp_link.target='_blank';\n    temp_link.appendChild(document.createTextNode(\"이동\"));\n    selectBtn.appendChild(temp_link);\n    selectBtn.onclick = function () {\n      history.push( {\n        pathname: `${match.path}/info/${name}/${id}`,\n        state: {   \n          id: id,\n          name : name,\n        numAddress : numAddress,\n        roadAddress : roadAddress,\n        }\n        \n    }\n      );\n    // history.pushState(query, '', `${match.path}/info/${name}`);  \n      \n    };\n    buttonContainer.appendChild(closeBtn);\n    buttonContainer.appendChild(selectBtn);\n\n    content.appendChild(buttonContainer);\n    \n   /*\n    function closeOverlay() {\n      history.push( {\n        pathname: `${match.path}/info/${name}/${id}`,\n        state: {   \n          id: id,\n          name : name,\n        numAddress : numAddress,\n        roadAddress : roadAddress,\n        }\n      });\n    }*/\n\n    // 마커 이미지의 이미지 크기 입니다\n    //var imageSize = new kakao.maps.Size(30, 35);\n    // 마커 이미지를 생성합니다\n    //var markerImage = new kakao.maps.MarkerImage(imageSrc, imageSize);\n    // 마커를 생성합니다\n    var marker = new kakao.maps.Marker({\n      //map: map, // 마커를 표시할 지도\n      position: new kakao.maps.LatLng(lat, long), // 마커를 표시할 위치\n      title: name, // 마커의 타이틀, 마커에 마우스를 올리면 타이틀이 표시됩니다\n      //image: markerImage // 마커 이미지\n    });\n\n    // 마커에 클릭이벤트를 등록합니다\n    kakao.maps.event.addListener(marker, 'click', function () {\n      // 마커를 클릭하면 장소명이 인포윈도우에 표출됩니다\n      console.log(map.getLevel());\n      if (map.getLevel() >= 3) {\n        map.setLevel(3);\n        map.panTo(new kakao.maps.LatLng(lat + 0.001, long));\n      } else if (map.getLevel() === 2) {\n        map.panTo(new kakao.maps.LatLng(lat + 0.0005, long));\n      } else {\n        map.panTo(new kakao.maps.LatLng(lat + 0.0003, long));\n      }\n      customOverlay1.setMap(map);\n      // overlay 변경\n    });\n\n    markers.push(marker);\n    marker.setMap(map);\n  }\n\n  function hideMarkers(markers) {\n    markers.forEach((marker) => marker.setMap(null));\n  }\n\n  const style = {\n    height: '80px',\n    width: '100px',\n  };\n\n  return (\n    /* jshint ignore:start */\n    <>\n      <div>\n        {\n          <Card size=\"small\" style={{ width: 300, height: 40 }}>\n            <Title level={5}>{name}</Title>\n            <h5>{roadAddress}</h5>\n            <Button type=\"primary\" onClick={displayMarker}>\n              위치 확인\n            </Button>\n          </Card>\n        }\n      </div>\n      <div id=\"map\" style={style}></div>\n    </>\n    /* jshint ignore:end */\n  );\n};\nexport default withRouter(Rstrn);\n","import React, { useState } from 'react';\nimport KaKaoMap from './KakaoMap';\nimport storeSeoul from './store-seoul.json';\nimport Card from './Card.js';\nimport SearchBar from './SearchBar.js';\nimport axios from 'axios';\nimport { Button, Breadcrumb } from 'antd';\nimport { HomeOutlined } from '@ant-design/icons';\nimport { Menu } from 'antd';\n\nconst MapContainer = () => {\n  const [data, setData] = useState(storeSeoul);\n  // const searchData = (pattern) => {\n  //   if (!pattern) {\n  //     setData(storeSeoul);\n  //     return;\n  //   }\n\n  //     const fuse = new Fuse(data, {\n  //       keys: [\"name\"],\n  //     });\n\n  //     //const fuse = new Fuse(, options);\n\n  //     const result = fuse.search(pattern);\n\n  //     //const result = fuse.search(pattern);\n  //     const matches = [];\n  //     if (!result.length) {\n  //       setData([]);\n  //     } else {\n  //       result.forEach(({ item }) => {\n  //         matches.push(item);\n  //       });\n  //       setData(matches);\n\n  //const result = fuse.search(pattern);\n  //   const matches = [];\n  //   if (!result.length) {\n  //     setData([]);\n  //   } else {\n  //     result.forEach(({ item }) => {\n  //       matches.push(item);\n  //     });\n  //     setData(matches);\n\n  //   }\n\n  // }\n  // const restrictclick = (e) => {\n  //   e.stopPropagation();\n  // }\n\n  return (\n    <div className=\"Map\">\n      {/* <div className=\"Map-left\"> */}\n      {/* <div className=\"navi\">\n          <Breadcrumb>\n            <Breadcrumb.Item href=\"http://localhost:3000/\">\n              <HomeOutlined />\n            </Breadcrumb.Item>\n            <Breadcrumb.Item href=\"http://localhost:3000/mypage\">\n              next\n            </Breadcrumb.Item>\n            <Breadcrumb.Item>Now</Breadcrumb.Item>\n          </Breadcrumb>\n        </div> */}\n\n      {/* <div className=\"content\" >\n\n          <div id=\"seoul\" defaultSelectedKeys={['1']}>\n            <Button type=\"text\" id=\"button-head\" key=\"1\">Seoul</Button>\n        <div className=\"content\" >\n          <div id=\"seoul\" defaultSelectedKeys={['1']}>\n            <Button type=\"text\" id=\"button-head\" key=\"1\">Seoul</Button>\n            <Button type=\"text\">맛집공간</Button>\n            <Button type=\"text\">주거공간</Button>\n          </div>\n          <div id=\"global\">\n            <Button type=\"text\" id=\"button-head\">Global</Button>\n            <Button type=\"text\">맛집공간</Button>\n            <Button type=\"text\">주거공간</Button>\n          </div>\n        </div>\n      </div>\n      <div className=\"up-down\" />\n      <div className=\"Map-main\">\n        <div id=\"KaKaoMap\">\n          <KaKaoMap></KaKaoMap>\n        </div>\n        <div id=\"Food-list\">\n          <SearchBar\n            placeholder=\"Search\"\n\n            onChange={(e) => searchData(e.target.value)}\n            style={{ width: '100 %' }}\n\n          />\n      <div className=\"itemContainer\">\n\n            {data.mydata ? data.mydata.map((d, index) => (\n              <Card id=\"aa\" {...d} key={index} />\n            )) : <h1>null</h1>}\n      </div>\n      </div> */}\n    </div>\n  );\n};\n\nexport default MapContainer;\n"],"sourceRoot":""}