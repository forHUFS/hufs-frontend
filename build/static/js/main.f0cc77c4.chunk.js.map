{"version":3,"sources":["_actions/loading_action.js","_actions/types.js","_actions/reviewPost_action.js","components/map/reviewSection/api.js","_reducer/index.js","_reducer/post_reducer.js","_reducer/comment_reducer.js","_reducer/user_reducer.js","_reducer/calendar_reducer.js","App.js","index.js"],"names":["START_LOADING","END_LOADING","startLoading","createAction","actionType","endLoading","loading","handleActions","state","action","payload","POST_LIST","POST_SAVE","POST_REMOVE","POST_LIKE","POST_UPDATE","POST_REPORT","POST_SCRAP","POST_SCRAP_REMOVE","POST_DELLIKE","POST_VIEW","POST_VIEW_FAIL","POST_LIST_FAIL","POST_SCRAP_REMOVE_FAIL","POST_SAVE_FAIL","POST_REMOVE_FAIL","POST_LIKE_FAIL","POST_UPDATE_FAIL","POST_REPORT_FAIL","POST_SCRAP_FAIL","POST_DELLIKE_FAIL","COMMENT_SAVE","COMMENT_LIKE","COMMENT_REMOVE","COMMENT_REPORT","COMMENT_SAVE_FAIL","COMMENT_LIKE_FAIL","COMMENT_REMOVE_FAIL","COMMENT_REPORT_FAIL","INFO_USER","UPDATE_USER","WITHDRAW_USER","LOGOUT_USER","LOGOUT_USER_FAIL","GET_SCHOLAR","GET_SCHOLAR_FAIL","INFO_USER_FAIL","UPDATE_USER_FAIL","WITHDRAW_USER_FAIL","AUTH_EMAIL","AUTH_EMAIL_FAIL","fetchItemSaga","fetchItemListSaga","itemSaga","FETCH_SUCCESS","FETCH_FAILURE","FETCH_ITEM","FETCH_LIST_SUCCESS","FETCH_LIST_FAILURE","FETCH_ITEM_LIST","fetchSuccess","data","fetchFailure","e","fetchItem","id","fetchListSuccess","fetchListFailure","fetchItemList","put","call","fetchItemApi","response","fetchItemListApi","takeLatest","item","error","items","axios","get","removeItemApi","delete","rootSaga","all","rootReducer","combineReducers","post","type","comment","user","nickname","mainMajor","doubleMajor","calendar","scholar","Post","loadable","LandingPage","MyPage","CalendarPage","SignUpModal","Page404","EmailAuthPage","MapPage","App","exact","path","component","sagaMiddleware","createSagaMiddleware","createStoreWithMiddleware","applyMiddleware","PromiseMiddleware","ReduxThunk","createStore","ReactDOM","render","store","Reducer","composeWithDevTools","document","getElementById","run"],"mappings":"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","file":"static/js/main.f0cc77c4.chunk.js","sourcesContent":["import { createAction, handleActions } from 'redux-actions';\n\n// action type (액션 상수 타입 정의)\nconst START_LOADING = 'loading/START_LOADING';\nconst END_LOADING = 'loading/END_LOADING';\n\n// create action function\n// 로딩 시작/끝 액션 함수를 만들고 외부에서 사용할 수 있도록 공개한다.\nexport const startLoading = createAction(\n  START_LOADING,\n  (actionType) => actionType,\n);\nexport const endLoading = createAction(END_LOADING, (actionType) => actionType);\n\n// init states - 모듈의 초기 상태 설정\nconst initialState = {};\n\n// definite reducer function\n// redux의 액션의 type에 따른 작업 - if문 또는 switch 문을 아래로 대체\n// 해당 액션별 로딩 시작/끝 상태를 설정한다.\nconst loading = handleActions(\n  {\n    [START_LOADING]: (state, action) => ({\n      ...state,\n      [action.payload]: true,\n    }),\n    [END_LOADING]: (state, action) => ({\n      ...state,\n      [action.payload]: false,\n    }),\n  },\n  initialState,\n);\n\nexport default loading;\n","export const POST_LIST = 'post_list';\nexport const POST_SAVE = 'post_save';\nexport const POST_REMOVE = 'post_remove';\nexport const POST_LIKE = 'post_like';\nexport const POST_UPDATE = 'post_update';\nexport const POST_REPORT = 'post_report';\nexport const POST_SCRAP = 'post_scrap';\nexport const POST_SCRAP_REMOVE = 'post_scrap_remove';\nexport const POST_DELLIKE = 'post_dellike';\nexport const POST_VIEW = 'post_view';\n\nexport const POST_VIEW_FAIL = 'post_view_fail';\nexport const POST_LIST_FAIL = 'post_list_fail';\nexport const POST_SCRAP_REMOVE_FAIL = 'post_scrap_remove_fail';\nexport const POST_SAVE_FAIL = 'post_save_fail';\nexport const POST_REMOVE_FAIL = 'post_remove_fail';\nexport const POST_LIKE_FAIL = 'post_like_fail';\nexport const POST_UPDATE_FAIL = 'post_update_fail';\nexport const POST_REPORT_FAIL = 'post_report_fail';\nexport const POST_SCRAP_FAIL = 'post_scrap_fail';\nexport const POST_DELLIKE_FAIL = 'post_dellike_fail';\n\nexport const COMMENT_LIST = 'comment_list';\nexport const COMMENT_SAVE = 'comment_save';\nexport const COMMENT_LIKE = 'comment_like';\nexport const COMMENT_REMOVE = 'comment_remove';\nexport const COMMENT_REPORT = 'comment_report';\n\nexport const COMMENT_SAVE_FAIL = 'comment_save_fail';\nexport const COMMENT_LIKE_FAIL = 'comment_like_fail';\nexport const COMMENT_REMOVE_FAIL = 'comment_remove_fail';\nexport const COMMENT_REPORT_FAIL = 'comment_report_fail';\n\nexport const AUTH_USER = 'auth_user';\nexport const INFO_USER = 'info_user';\nexport const UPDATE_USER = 'update_user';\nexport const WITHDRAW_USER = 'withdraw_user';\nexport const LOGOUT_USER = 'logout_user';\nexport const LOGOUT_USER_FAIL = 'logout_user_fail';\nexport const GET_SCHOLAR = 'get_scholar';\nexport const GET_SCHOLAR_FAIL = 'get_scholar_fail';\nexport const INFO_USER_FAIL = 'info_user_fail';\nexport const UPDATE_USER_FAIL = 'update_user_fail';\nexport const WITHDRAW_USER_FAIL = 'withdraw_user_fail';\n\nexport const AUTH_EMAIL = 'auth_email';\nexport const AUTH_EMAIL_FAIL = 'auth_eamil_fail';\n","import { createAction, handleActions } from 'redux-actions';\nimport { takeLatest, call, put } from 'redux-saga/effects';\nimport {\n  fetchItemApi,\n  fetchItemListApi,\n} from '../components/map/reviewSection/api';\n\nimport { startLoading, endLoading } from './loading_action';\n\n// 액션 타입 (상세)\nconst FETCH_SUCCESS = 'item/FETCH_SUCCESS';\nconst FETCH_FAILURE = 'item/FETCH_FAILURE';\n\n// 상세 조회 액션 타입\nexport const FETCH_ITEM = 'item/FETCH_ITEM';\n\n// 액션 타입 (목록)\nconst FETCH_LIST_SUCCESS = 'item/FETCH_LIST_SUCCESS';\nconst FETCH_LIST_FAILURE = 'item/FETCH_LIST_FAILURE';\n\n// 목록 조회 액션 타입\nexport const FETCH_ITEM_LIST = 'item/FETCH_ITEM_LIST';\n\n// 액션 생성 함수 (상세)\nexport const fetchSuccess = createAction(FETCH_SUCCESS, (data) => data);\nexport const fetchFailure = createAction(FETCH_FAILURE, (e) => e);\n\n// 상세 조회 액션 생성 함수\nexport const fetchItem = createAction(FETCH_ITEM, (id) => id);\n\n// 액션 생성 함수 (목록)\nexport const fetchListSuccess = createAction(\n  FETCH_LIST_SUCCESS,\n  (data) => data,\n);\nexport const fetchListFailure = createAction(FETCH_LIST_FAILURE, (e) => e);\n\n// 목록 조회 액션 생성 함수\nexport const fetchItemList = createAction(FETCH_ITEM_LIST);\n\n// 음식 상세정보를 조회하는 태스크\nfunction* fetchItemSaga(action) {\n  yield put(startLoading(FETCH_ITEM));\n  try {\n    const response = yield call(fetchItemApi, action.payload);\n    yield put(fetchSuccess(response.data));\n  } catch (e) {\n    yield put(fetchFailure(e));\n  }\n  yield put(endLoading(FETCH_ITEM));\n}\n\n/*\ncreateAction\nCreate an enhanced action-creator with unlimited number of arguments.\n\nResulting action-creator will preserve semantic names of their arguments (id, title, amount, etc...).\nReturned action object have predefined properties ({ type, payload, meta })\n\n'redux-saga/effects' 에는 다양한 유틸함수들이 들어있습니다. \nput 이란 함수가 매우 중요한데요, 이 함수를 통하여 새로운 액션을 디스패치 할 수 있습니다.\n그 다음엔, takeEvery, takeLatest 라는 유틸함수들을 사용해보겠습니다. 이 함수들은 액션을 모니터링하는 함수인데요, \ntakeEvery는 특정 액션 타입에 대하여 디스패치되는 모든 액션들을 처리하는 것 이고, \ntakeLatest는 특정 액션 타입에 대하여 디스패치된 가장 마지막 액션만을 처리하는 함수입니다. \n예를 들어서 특정 액션을 처리하고 있는 동안 동일한 타입의 새로운 액션이 디스패치되면 기존에 하던 작업을 무시 처리하고 새로운 작업을 시작합니다.\n\ncall\ncall 은 블럭되는 fork 라고 보면 된다. 인자로 함수나 saga task 를 받을 수 있다.\n두번째부터는 실행될 함수나 사가의 인자로 들어간다.\n보통 Promise 등의 실행 (보통은 Ajax Call) 에 쓰이며 Promise 가 resolve 될 때까지 블럭된다.\n\n*/\n\n// 음식 목록을 조회하는 태스크\nfunction* fetchItemListSaga() {\n  yield put(startLoading(FETCH_ITEM_LIST));\n  try {\n    const response = yield call(fetchItemListApi);\n    yield put(fetchListSuccess(response.data));\n  } catch (e) {\n    yield put(fetchListFailure(e));\n  }\n  yield put(endLoading(FETCH_ITEM_LIST));\n}\n\n// 음식 saga 함수 작성\nexport function* itemSaga() {\n  // 상세조회 태스크\n  yield takeLatest(FETCH_ITEM, fetchItemSaga);\n  // 목록 조회 태스크 수행\n  yield takeLatest(FETCH_ITEM_LIST, fetchItemListSaga);\n}\n\n// 모듈의 초기 상태\nconst initialState = {\n  item: null, // 하나의 음식 정보\n  items: [], // 음식 목록\n  error: null, // 응답에러 정보\n};\n\n// 리듀서 함수 정의\n// 리듀서는 상태변화를 일으키는 함수이다.\nconst item = handleActions(\n  {\n    // 상세 조회 상태 변경\n    [FETCH_SUCCESS]: (state, action) => ({\n      ...state,\n      item: action.payload,\n    }),\n    [FETCH_FAILURE]: (state, action) => ({\n      ...state,\n      error: action.payload,\n    }),\n    // 목록 조회 상태 변경\n    [FETCH_LIST_SUCCESS]: (state, action) => ({\n      ...state,\n      items: action.payload,\n    }),\n    [FETCH_LIST_FAILURE]: (state, action) => ({\n      ...state,\n      error: action.payload,\n    }),\n  },\n  initialState,\n);\n\nexport default item;\n","import axios from 'axios';\n\n// 음식 상세 조회 API 호출 함수\nexport const fetchItemApi = (id) =>\n  axios.get(`http://52.78.2.40:8080/store/review/${id}`);\n\n// 음식 목록 조회 API 호출 함수\nexport const fetchItemListApi = (id) =>\n  axios.get(`http://52.78.2.40:8080/store/${id}/review`);\n\n// 음식 삭제 API\nexport const removeItemApi = (id) =>\n  axios.delete(`http://52.78.2.40:8080/store/review/${id}`);\n","import { combineReducers } from 'redux';\nimport post from './post_reducer';\nimport comment from './comment_reducer';\nimport user from './user_reducer';\nimport { all } from 'redux-saga/effects';\nimport item, { itemSaga } from '../_actions/reviewPost_action';\nimport loading from '../_actions/loading_action';\nimport calendar from './calendar_reducer';\nconst rootReducer = combineReducers({\n  post,\n  comment,\n  user,\n  item,\n  loading,\n  calendar,\n});\n\n// 루트 사가\n\nexport function* rootSaga() {\n  yield all([itemSaga()]);\n}\n\nexport default rootReducer;\n","import {\n  POST_LIST,\n  POST_REMOVE,\n  POST_SAVE,\n  POST_LIKE,\n  POST_UPDATE,\n  POST_REPORT,\n  POST_UPDATE_FAIL,\n  POST_REPORT_FAIL,\n  POST_LIKE_FAIL,\n  POST_REMOVE_FAIL,\n  POST_SCRAP_FAIL,\n  POST_SCRAP,\n  POST_SCRAP_REMOVE,\n  POST_SCRAP_REMOVE_FAIL,\n  POST_DELLIKE,\n  POST_DELLIKE_FAIL,\n  POST_LIST_FAIL,\n  POST_VIEW,\n  POST_VIEW_FAIL,\n} from '../_actions/types';\n\nexport default function post(state = {}, action) {\n  switch (action.type) {\n    case POST_VIEW:\n    case POST_VIEW_FAIL:\n    case POST_DELLIKE:\n    case POST_DELLIKE_FAIL:\n    case POST_LIST:\n    case POST_SAVE:\n    case POST_UPDATE:\n    case POST_REMOVE:\n    case POST_LIKE:\n    case POST_REMOVE_FAIL:\n    case POST_UPDATE_FAIL:\n    case POST_REPORT_FAIL:\n    case POST_LIKE_FAIL:\n    case POST_UPDATE_FAIL:\n    case POST_REPORT:\n    case POST_LIST:\n    case POST_SCRAP_FAIL:\n    case POST_SCRAP:\n    case POST_SCRAP_REMOVE:\n    case POST_SCRAP_REMOVE_FAIL:\n    case POST_LIST_FAIL:\n      return {\n        ...state,\n      };\n    default:\n      return state;\n  }\n}\n","import {\n  COMMENT_LIST,\n  COMMENT_REMOVE,\n  COMMENT_SAVE,\n  COMMENT_LIKE,\n  COMMENT_SAVE_FAIL,\n  COMMENT_LIKE_FAIL,\n  COMMENT_REPORT,\n  COMMENT_REPORT_FAIL,\n  COMMENT_REMOVE_FAIL,\n} from '../_actions/types';\n\nexport default function comment(state = {}, action) {\n  switch (action.type) {\n    case COMMENT_SAVE:\n    case COMMENT_REMOVE:\n    case COMMENT_LIKE:\n    case COMMENT_REPORT:\n    case COMMENT_SAVE_FAIL:\n    case COMMENT_LIKE_FAIL:\n    case COMMENT_REPORT_FAIL:\n    case COMMENT_REMOVE_FAIL:\n      return {\n        ...state,\n      };\n    default:\n      return state;\n  }\n}\n","// login, logout, register, auth\nimport {\n  INFO_USER,\n  AUTH_USER,\n  UPDATE_USER,\n  WITHDRAW_USER,\n  INFO_USER_FAIL,\n  UPDATE_USER_FAIL,\n  WITHDRAW_USER_FAIL,\n  AUTH_EMAIL,\n  AUTH_EMAIL_FAIL,\n  LOGOUT_USER,\n  LOGOUT_USER_FAIL,\n} from '../_actions/types';\nexport default function user(state = {}, action) {\n  switch (action.type) {\n    case INFO_USER:\n      return action.payload;\n    case UPDATE_USER:\n      return {\n        ...state,\n        nickname: action.payload.nickname,\n        mainMajor: action.payload.mainMajor,\n        doubleMajor: action.payload.doubleMajor,\n      };\n    case LOGOUT_USER:\n    case WITHDRAW_USER:\n      return {};\n    case AUTH_EMAIL:\n    case LOGOUT_USER_FAIL:\n    case WITHDRAW_USER_FAIL:\n    case AUTH_EMAIL_FAIL:\n    case INFO_USER_FAIL:\n    case UPDATE_USER_FAIL:\n    default:\n      return {\n        ...state,\n      };\n  }\n}\n","import { GET_SCHOLAR, GET_SCHOLAR_FAIL } from '../_actions/types';\nexport default function calendar(state = {}, action) {\n  switch (action.type) {\n    case GET_SCHOLAR:\n      return { scholar: action.payload.data, ...state };\n    case GET_SCHOLAR_FAIL:\n    default:\n      return { ...state };\n      break;\n  }\n}\n","import React from 'react';\nimport loadable from '@loadable/component';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport './App2.css';\nconst Post = loadable(() => import('./views/PostPage/Post'));\nconst LandingPage = loadable(() => import('./views/LandingPage/LandingPage'));\nconst MyPage = loadable(() => import('./views/MyPage/MyPage'));\nconst CalendarPage = loadable(() =>\n  import('./views/CalendarPage/CalendarPage'),\n);\nconst SignUpModal = loadable(() =>\n  import('./components/login/modals/SignUpModal'),\n);\nconst Page404 = loadable(() => import('./views/Page404/Page404'));\nconst EmailAuthPage = loadable(() =>\n  import('./views/EmailAuthPage/EmailAuthPage'),\n);\nconst MapPage = loadable(() => import('./views/MapPage/MapPage'));\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\" component={LandingPage} />\n        <Route exact path=\"/register\" component={SignUpModal} />\n        <Route path=\"/1\" component={Post} />\n        <Route path=\"/2\" component={Post} />\n        <Route path=\"/3\" component={Post} />\n        <Route path=\"/4\" component={Post} />\n        <Route path=\"/5\" component={Post} />\n        <Route path=\"/6\" component={Post} />\n        <Route path=\"/redirect\" component={SignUpModal} />\n        <Route path={`/user/email`} component={EmailAuthPage} />\n        <Route path=\"/map\" component={MapPage} />\n        <Route path=\"/calendar\" component={CalendarPage} />\n        <Route path=\"/mypage\" component={MyPage} />\n        <Route path=\"/auth\" component={EmailAuthPage} />\n        <Route path=\"*\" component={Page404} />\n      </Switch>\n      {/* <footer>항상 보여요 footer</footer> */}\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport ReduxThunk from 'redux-thunk';\nimport Reducer, { rootSaga } from './_reducer/index';\nimport PromiseMiddleware from 'redux-promise';\nimport App from './App';\nimport createSagaMiddleware from 'redux-saga';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst createStoreWithMiddleware = applyMiddleware(\n  PromiseMiddleware,\n  ReduxThunk,\n)(createStore);\n\nReactDOM.render(\n  <Provider\n    store={createStoreWithMiddleware(\n      Reducer,\n      composeWithDevTools(applyMiddleware(sagaMiddleware)),\n    )}\n  >\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\nsagaMiddleware.run(rootSaga); // 리덕스 사가 미들웨어 실행\n"],"sourceRoot":""}