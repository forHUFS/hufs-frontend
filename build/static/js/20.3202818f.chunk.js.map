{"version":3,"sources":["_actions/post_action.js","components/post/PostList.js"],"names":["postView","postId","a","axios","get","PUBLIC_URL","request","status","type","POST_VIEW","payload","data","POST_VIEW_FAIL","postList","match","path","POST_LIST","POST_LIST_FAIL","postReport","body","post","POST_REPORT","POST_REPORT_FAIL","postSave","needDelete","boardId","length","url","POST_SAVE","POST_SAVE_FAIL","error","postUpdate","updated","put","POST_UPDATE","POST_UPDATE_FAIL","postRemove","delete","POST_REMOVE","POST_REMOVE_FAIL","postLike","POST_LIKE","POST_LIKE_FAIL","postDellike","POST_DELLIKE","POST_DELLIKE_FAIL","postScrap","params","POST_SCRAP","POST_SCRAP_FAIL","deleteScrap","id","POST_SCRAP_REMOVE","POST_SCRAP_REMOVE_FAIL","Search","Input","Column","Table","ColumnGroup","TableBody","currentList","loading","pagination","dataSource","title","dataIndex","render","text","record","to","slice","User","nickname","createdAt","withRouter","history","useState","setCurrentList","listPerPage","currentPage","setCurrentPage","dispatch","useDispatch","posts","setPosts","setloading","useEffect","then","response","reverse","catch","message","push","sliced","firstIndex","lastIndex","className","findBoardName","substring","subTitle","onClick","e","pathname","state","detail","placeholder","allowClear","onSearch","console","log","style","float","marginBottom","width","height","pageCount","Math","ceil","pageRangeDisplayed","marginPagesDisplayed","breakLabel","previousLabel","nextLabel","onPageChange","event","selected","containerClassName","activeClassName","previousClassName","nextClassName"],"mappings":"0gBAyBaA,EAAQ,uCAAG,WAAOC,GAAP,eAAAC,EAAA,sEACAC,IAAMC,IAAN,UAAaC,IAAb,iBAAgCJ,IADhC,UAGC,OAFjBK,EADgB,QAGVC,OAHU,yCAIb,CACLC,KAAMC,IACNC,QAASJ,EAAQK,KAAKA,KACtBJ,OAAQD,EAAQC,SAPE,gCAUb,CACLC,KAAMI,IACNL,OAAQD,EAAQC,SAZE,2CAAH,sDAiBRM,EAAQ,uCAAG,WAAOC,GAAP,eAAAZ,EAAA,sEACAC,IAAMC,IAAN,UAAaC,IAAb,iBAAgCS,EAAMC,OADtC,UAEC,OADjBT,EADgB,QAEVC,OAFU,yCAGb,CACLC,KAAMQ,IACNN,QAASJ,EAAQK,KAAKA,KACtBJ,OAAQD,EAAQC,SANE,gCASb,CACLC,KAAMS,IACNV,OAAQD,EAAQC,SAXE,2CAAH,sDAgBRW,EAAU,uCAAG,WAAOjB,EAAQkB,GAAf,eAAAjB,EAAA,sEACFC,IACnBiB,KADmB,UACXf,IADW,iBACQJ,EADR,WACyBkB,GAFvB,UAGD,OAFjBb,EADkB,QAGZC,OAHY,yCAIf,CACLC,KAAMa,IACNd,OAAQD,EAAQC,SANI,gCASf,CACLC,KAAMc,IACNf,OAAQD,EAAQC,SAXI,2CAAH,wDAgBVgB,EAAQ,uCAAG,WAAOJ,EAAMK,EAAYC,GAAzB,eAAAvB,EAAA,sEACAC,IAAMiB,KAAN,UAAcf,IAAd,kBAAkCoB,EAAlC,SAAkDN,GADlD,UAChBb,EADgB,OAGI,IAAtBkB,EAAWE,OAHO,gCAIdvB,IAAMiB,KAAN,UAAcf,IAAd,cAAsC,CAAEsB,IAAKH,IAJ/B,UAMC,MAAnBlB,EAAQC,OANU,0CAOb,CACLC,KAAMoB,IACNrB,OAAQD,EAAQC,SATE,iCAYb,CACLC,KAAMqB,IACNtB,OAAQD,EAAQwB,QAdE,4CAAH,0DAmBRC,EAAU,uCAAG,WAAOC,EAASR,EAAYvB,GAA5B,eAAAC,EAAA,sEACFC,IAAM8B,IAAN,UAAa5B,IAAb,iBAAgCJ,GAAU+B,GADxC,UAClB1B,EADkB,OAGE,IAAtBkB,EAAWE,OAHS,gCAIhBvB,IAAMiB,KAAN,UAAcf,IAAd,cAAsC,CAAEsB,IAAKH,IAJ7B,UAMD,MAAnBlB,EAAQC,OANY,0CAOf,CACLC,KAAM0B,IACN3B,OAAQD,EAAQC,SATI,iCAYf,CACLC,KAAM2B,IACN5B,OAAQD,EAAQC,SAdI,4CAAH,0DAmBV6B,EAAU,uCAAG,WAAOnC,GAAP,eAAAC,EAAA,sEACFC,IAAMkC,OAAN,UAAgBhC,IAAhB,iBAAmCJ,IADjC,UAED,OADjBK,EADkB,QAEZC,OAFY,yCAGf,CACLC,KAAM8B,IACN/B,OAAQD,EAAQC,SALI,gCAQf,CACLC,KAAM+B,IACNhC,OAAQD,EAAQC,SAVI,2CAAH,sDAeViC,EAAQ,uCAAG,WAAOvC,GAAP,eAAAC,EAAA,sEACAC,IAAMC,IAAN,UAAaC,IAAb,iBAAgCJ,EAAhC,aADA,UAEC,OADjBK,EADgB,QAEVC,OAFU,yCAGb,CACLC,KAAMiC,IACNlC,OAAQD,EAAQC,SALE,gCAQb,CACLC,KAAMkC,IACNnC,OAAQD,EAAQC,SAVE,2CAAH,sDAcRoC,EAAW,uCAAG,WAAO1C,GAAP,eAAAC,EAAA,sEACHC,IAAMC,IAAN,UAAaC,IAAb,iBAAgCJ,EAAhC,aADG,UAEF,OADjBK,EADmB,QAEbC,OAFa,yCAGhB,CACLC,KAAMoC,IACNrC,OAAQD,EAAQC,SALK,gCAQhB,CACLC,KAAMqC,IACNtC,OAAQD,EAAQC,SAVK,2CAAH,sDAiBXuC,EAAS,uCAAG,WAAO7C,GAAP,eAAAC,EAAA,sEACDC,IAAMiB,KAAN,UAAcf,IAAd,eAAuC,KAAM,CACjE0C,OAAQ,CAAE9C,OAAQA,KAFG,UAIA,OAHjBK,EADiB,QAIXC,OAJW,yCAKd,CACLC,KAAMwC,IACNzC,OAAQD,EAAQC,SAPG,gCAUd,CACLC,KAAMyC,IACN1C,OAAQD,EAAQC,SAZG,2CAAH,sDAkBT2C,EAAW,uCAAG,WAAOjD,GAAP,eAAAC,EAAA,sEACHC,IAAMkC,OAAN,UAAgBhC,IAAhB,eAAyC,KAAM,CACnE0C,OAAQ,CAAEI,GAAIlD,KAFS,UAIF,OAHjBK,EADmB,QAIbC,OAJa,yCAKhB,CACLC,KAAM4C,IACN7C,OAAQD,EAAQC,SAPK,gCAUhB,CACLC,KAAM6C,IACN9C,OAAQD,EAAQC,SAZK,2CAAH,uD,sOCvKhB+C,EAAWC,IAAXD,OACAE,EAAwBC,IAAxBD,OAAwBC,IAAhBC,YAqHT,SAASC,EAAT,GAA4C,IAAvBC,EAAsB,EAAtBA,YAAa9C,EAAS,EAATA,MACvC,OACE,qCACG+C,IACC,eAAC,IAAD,CAAOC,YAAY,EAAOC,WAAYH,EAAtC,UACE,cAACJ,EAAD,CAAQQ,MAAM,IAAIC,UAAU,MAAS,MACrC,cAACT,EAAD,CACEQ,MAAM,eAENE,OAAQ,SAACC,EAAMC,GAAP,OACN,cAAC,IAAD,CAAMC,GAAE,UAAKvD,EAAMC,KAAX,YAAmBqD,EAAOjB,IAAlC,SACGiB,EAAOJ,MAAMtC,OAAS,GACnB0C,EAAOJ,MAAMM,MAAM,EAAG,IACtBF,EAAOJ,UALX,SAQH,IACH,cAACR,EAAD,CACEQ,MAAM,qBACNE,OAAQ,SAACC,EAAMC,GAAP,OACU,OAAhBA,EAAOG,KACL,6EAEA,mCAAGH,EAAOG,KAAKC,aAIf,QAEN,cAAChB,EAAD,CACEQ,MAAM,qBACNE,OAAQ,SAACC,EAAMC,GAAP,OACNA,EAAOK,UAAYL,EAAOK,UAAUH,MAAM,EAAG,IAAM,SAEjD,aAEN,cAACd,EAAD,CAAQQ,MAAM,qBAAMC,UAAU,QAAW,WAG3C,qCACG,IACD,cAAC,IAAD,OAED,OA7CMS,uBAlHf,YAAuC,IAAnB5D,EAAkB,EAAlBA,MAAO6D,EAAW,EAAXA,QAAW,EAEEC,mBAAS,IAFX,mBAEhBC,GAFgB,aAGED,mBAAS,IAHX,mBAG7BE,EAH6B,aAIEF,mBAAS,IAJX,mBAI7BG,EAJ6B,KAIhBC,EAJgB,KAK9BC,EAAWC,cALmB,EAMVN,mBAAS,IANC,mBAM7BO,EAN6B,KAMtBC,EANsB,OAONR,oBAAS,GAPH,mBAOpBS,GAPoB,WASpCC,qBAAU,WACRL,EAASpE,YAASC,IACfyE,MAAK,SAACC,GACmB,MAApBA,EAASjF,SACX6E,EAASI,EAAS9E,QAAQ+E,WAC1BJ,GAAW,OAGdK,OAAM,SAAC5D,GAAW,IAAD,EAChB,iBAAQA,EAAM0D,gBAAd,aAAQ,EAAgBjF,QACtB,KAAK,IACHoF,IAAQ7D,MAAM,kEAEd,MACF,KAAK,IACH6D,IAAQ7D,MAAM,0CACd6C,EAAQiB,KAAK,WAMpB,CAAC9E,EAAMC,OACVuE,qBAAU,WACR,IAAMO,EAASV,EAAMb,MAAMwB,EAAYC,GACvClB,EAAegB,KACd,CAACd,IAEJ,IAAMgB,EAAYhB,EAAcD,EAC1BgB,EAAaf,EAAcD,EAAcA,EAmB/C,OACE,qCACG,IACD,wBAAOkB,UAAU,iBAAjB,UACE,cAAC,IAAD,CACEhC,MAvBR,SAAuBvC,GACrB,OAAQA,GACN,KAAK,EACH,MAAO,0BACT,KAAK,EACH,MAAO,0BACT,KAAK,EACH,MAAO,0BACT,KAAK,EACH,MAAO,gCACT,KAAK,EACH,MAAO,0BACT,KAAK,EACH,MAAO,8CAUEwE,EAAenF,EAAMa,IAAIuE,UAAU,IAC1CC,SAAS,iBACR,IAGH,sBAAKH,UAAU,gBAAf,UACE,cAAC,IAAD,CACEI,QAAS,SAACC,GAAD,OACP1B,EAAQiB,KAAK,CACXU,SAAS,GAAD,OAAKxF,EAAMC,KAAX,SACRwF,MAAO,CAAEC,OAAQ1F,EAAMC,SAJ7B,iCAUA,cAACuC,EAAD,CACEmD,YAAY,qBACZC,YAAU,EACVC,SAAU,SAACN,GAAD,OAAOO,QAAQC,IAAIR,IAC7BS,MAAO,CACLC,MAAO,QACPC,aAAc,OACdC,MAAO,QACPC,OAAQ,UAGZ,cAACvD,EAAD,CACEC,YAAauB,EAAMb,MAAMwB,EAAYC,GACrCjF,MAAOA,UAIb,qBAAKkF,UAAU,SAAf,SACE,cAAC,IAAD,CACEmB,UAAWC,KAAKC,KAAKlC,EAAMzD,OAAS,IACpC4F,mBAAoB,EACpBC,qBAAsB,EACtBC,WAAY,GACZC,cAAe,eACfC,UAAW,eACXC,aAAc,SAACC,GAAD,OAAW5C,EAAe4C,EAAMC,SAAW,IACzDC,mBAAoB,gBACpBC,gBAAiB,cACjBC,kBAAmB,gBACnBC,cAAe,2B","file":"static/js/20.3202818f.chunk.js","sourcesContent":["import axios from 'axios';\nimport { PUBLIC_URL } from '../config';\nimport {\n  POST_REPORT,\n  POST_LIST,\n  POST_LIST_FAIL,\n  POST_REMOVE,\n  POST_SAVE,\n  POST_LIKE,\n  POST_UPDATE,\n  POST_REPORT_FAIL,\n  POST_SAVE_FAIL,\n  POST_REMOVE_FAIL,\n  POST_LIKE_FAIL,\n  POST_UPDATE_FAIL,\n  POST_SCRAP,\n  POST_SCRAP_FAIL,\n  POST_SCRAP_REMOVE,\n  POST_SCRAP_REMOVE_FAIL,\n  POST_DELLIKE,\n  POST_DELLIKE_FAIL,\n  POST_VIEW_FAIL,\n  POST_VIEW,\n} from './types';\n// 완료\nexport const postView = async (postId) => {\n  const request = await axios.get(`${PUBLIC_URL}/post/${postId}`);\n\n  if (request.status === 200) {\n    return {\n      type: POST_VIEW,\n      payload: request.data.data, // 객체\n      status: request.status,\n    };\n  } else {\n    return {\n      type: POST_VIEW_FAIL,\n      status: request.status,\n    };\n  }\n};\n// 완료\nexport const postList = async (match) => {\n  const request = await axios.get(`${PUBLIC_URL}/board${match.path}`);\n  if (request.status === 200) {\n    return {\n      type: POST_LIST,\n      payload: request.data.data, // 배열\n      status: request.status,\n    };\n  } else {\n    return {\n      type: POST_LIST_FAIL,\n      status: request.status,\n    };\n  }\n};\n//완료\nexport const postReport = async (postId, body) => {\n  const request = await axios //body : postId, content, detail\n    .post(`${PUBLIC_URL}/post/${postId}/report`, body);\n  if (request.status === 200) {\n    return {\n      type: POST_REPORT,\n      status: request.status,\n    };\n  } else {\n    return {\n      type: POST_REPORT_FAIL,\n      status: request.status,\n    };\n  }\n};\n// 완료\nexport const postSave = async (body, needDelete, boardId) => {\n  const request = await axios.post(`${PUBLIC_URL}/board/${boardId}/post`, body);\n\n  if (needDelete.length !== 0) {\n    await axios.post(`${PUBLIC_URL}/post/back`, { url: needDelete });\n  }\n  if (request.status === 200) {\n    return {\n      type: POST_SAVE,\n      status: request.status,\n    };\n  } else {\n    return {\n      type: POST_SAVE_FAIL,\n      status: request.error,\n    };\n  }\n};\n// 완료\nexport const postUpdate = async (updated, needDelete, postId) => {\n  const request = await axios.put(`${PUBLIC_URL}/post/${postId}`, updated);\n\n  if (needDelete.length !== 0) {\n    await axios.post(`${PUBLIC_URL}/post/back`, { url: needDelete });\n  }\n  if (request.status === 200) {\n    return {\n      type: POST_UPDATE,\n      status: request.status,\n    };\n  } else {\n    return {\n      type: POST_UPDATE_FAIL,\n      status: request.status,\n    };\n  }\n};\n// 완료\nexport const postRemove = async (postId) => {\n  const request = await axios.delete(`${PUBLIC_URL}/post/${postId}`);\n  if (request.status === 200) {\n    return {\n      type: POST_REMOVE,\n      status: request.status,\n    };\n  } else {\n    return {\n      type: POST_REMOVE_FAIL,\n      status: request.status,\n    };\n  }\n};\n// 완료\nexport const postLike = async (postId) => {\n  const request = await axios.get(`${PUBLIC_URL}/post/${postId}/addlike`);\n  if (request.status === 200) {\n    return {\n      type: POST_LIKE,\n      status: request.status,\n    };\n  } else {\n    return {\n      type: POST_LIKE_FAIL,\n      status: request.status,\n    };\n  }\n};\nexport const postDellike = async (postId) => {\n  const request = await axios.get(`${PUBLIC_URL}/post/${postId}/dellike`);\n  if (request.status === 200) {\n    return {\n      type: POST_DELLIKE,\n      status: request.status,\n    };\n  } else {\n    return {\n      type: POST_DELLIKE_FAIL,\n      status: request.status,\n    };\n  }\n};\n\n// request  query로 보내야하는데..\n// 스웨거 request URL은 맞춤 , 500\nexport const postScrap = async (postId) => {\n  const request = await axios.post(`${PUBLIC_URL}/user/scrap`, null, {\n    params: { postId: postId },\n  });\n  if (request.status === 200) {\n    return {\n      type: POST_SCRAP,\n      status: request.status,\n    };\n  } else {\n    return {\n      type: POST_SCRAP_FAIL,\n      status: request.status,\n    };\n  }\n};\n\n// id가 스크랩 아이디라서 조금 다른데 해결필요\nexport const deleteScrap = async (postId) => {\n  const request = await axios.delete(`${PUBLIC_URL}/user/scrap`, null, {\n    params: { id: postId },\n  });\n  if (request.status === 200) {\n    return {\n      type: POST_SCRAP_REMOVE,\n      status: request.status,\n    };\n  } else {\n    return {\n      type: POST_SCRAP_REMOVE_FAIL,\n      status: request.status,\n    };\n  }\n};\n","import React, { useEffect, useState } from 'react';\nimport { Link, Switch, withRouter } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport ReactPaginate from 'react-paginate';\nimport './PostList.css';\nimport { message, Skeleton } from 'antd';\nimport { postList } from '../../_actions/post_action';\nimport { PageHeader, Button, Table, Tag, Input, Space } from 'antd';\nimport loading from '../../_actions/loading_action';\nconst { Search } = Input;\nconst { Column, ColumnGroup } = Table;\nfunction PostList({ match, history }) {\n\n  const [currentList, setCurrentList] = useState([]);\n  const [listPerPage, setListPerPage] = useState(10);\n  const [currentPage, setCurrentPage] = useState(1);\n  const dispatch = useDispatch();\n  const [posts, setPosts] = useState([]);\n  const [loading, setloading] = useState(false);\n  // console.log(match.path.substring(1)); // 게시판 이름\n  useEffect(() => {\n    dispatch(postList(match))\n      .then((response) => {\n        if (response.status === 200) {\n          setPosts(response.payload.reverse());\n          setloading(true);\n        }\n      })\n      .catch((error) => {\n        switch (error.response?.status) {\n          case 401:\n            message.error('로그인하지 않은 사용자');\n            // history.push('/');\n            break;\n          case 403:\n            message.error('접근 권한 오류');\n            history.push('/');\n            break;\n          default:\n            break;\n        }\n      });\n  }, [match.path]);\n  useEffect(() => {\n    const sliced = posts.slice(firstIndex, lastIndex);\n    setCurrentList(sliced);\n  }, [currentPage]);\n\n  const lastIndex = currentPage * listPerPage; // 10, 20, 30\n  const firstIndex = currentPage * listPerPage - listPerPage; // 1, 11, 21..\n  function findBoardName(boardId) {\n    switch (boardId) {\n      case 1:\n        return '떠들 어 boo';\n      case 2:\n        return '학교 해 boo';\n      case 3:\n        return '학교 간 boo';\n      case 4:\n        return '학교 떠난 boo';\n      case 5:\n        return '정면 승 boo';\n      case 6:\n        return '이거 모르면 바 boo';\n      default:\n        break;\n    }\n  }\n  return (\n    <>\n      {' '}\n      <table className=\"community-main\">\n        <PageHeader\n          title={findBoardName(+match.url.substring(1))}\n          subTitle=\"설명\"\n        />{' '}\n        {/* <span className=\"navi\"> */}\n        {/* </span>{' '} */}\n        <div className=\"community-box\">\n          <Button\n            onClick={(e) =>\n              history.push({\n                pathname: `${match.path}/edit`,\n                state: { detail: match.path },\n              })\n            }\n          >\n            글 작성\n          </Button>\n          <Search\n            placeholder=\"검색창\"\n            allowClear\n            onSearch={(e) => console.log(e)}\n            style={{\n              float: 'right',\n              marginBottom: '10px',\n              width: '300px',\n              height: '30px',\n            }}\n          />\n          <TableBody\n            currentList={posts.slice(firstIndex, lastIndex)}\n            match={match}\n          />\n        </div>\n      </table>\n      <div className=\"bottom\">\n        <ReactPaginate\n          pageCount={Math.ceil(posts.length / 10)}\n          pageRangeDisplayed={5}\n          marginPagesDisplayed={0}\n          breakLabel={''}\n          previousLabel={'이전'}\n          nextLabel={'다음'}\n          onPageChange={(event) => setCurrentPage(event.selected + 1)}\n          containerClassName={'pagination-ul'}\n          activeClassName={'currentPage'}\n          previousClassName={'pageLabel-btn'}\n          nextClassName={'pageLabel-btn'}\n        />\n      </div>\n    </>\n  );\n}\n\nexport default withRouter(PostList);\n\nexport function TableBody({ currentList, match }) {\n  return (\n    <>\n      {loading ? (\n        <Table pagination={false} dataSource={currentList}>\n          <Column title=\"-\" dataIndex=\"id\" key=\"id\" />\n          <Column\n            title=\"제목\"\n            key=\"title\"\n            render={(text, record) => (\n              <Link to={`${match.path}/${record.id}`}>\n                {record.title.length > 20\n                  ? record.title.slice(0, 20)\n                  : record.title}\n              </Link>\n            )}\n          />{' '}\n          <Column\n            title=\"작성자\"\n            render={(text, record) =>\n              record.User === null ? (\n                <>탈퇴한 사용자</>\n              ) : (\n                <>{record.User.nickname}</>\n              )\n            }\n            // console.log(record);\n            key=\"User\"\n          />\n          <Column\n            title=\"작성일\"\n            render={(text, record) =>\n              record.createdAt ? record.createdAt.slice(0, 10) : 'none'\n            }\n            key=\"createdAt\"\n          />\n          <Column title=\"추천수\" dataIndex=\"like\" key=\"like\" />\n        </Table>\n      ) : (\n        <>\n          {' '}\n          <Skeleton />\n        </>\n      )}{' '}\n    </>\n    // <tbody>\n    //   {currentList ? (\n    //     currentList.map((post, index) => {\n    //       return (\n    //         <tr key={index}>\n    //           <td>{post.title.slice(0, 4)}</td>\n    //           <td>\n    //             <Link to={`${match.path}/${post.id}`}>{post.content}</Link>\n    //           </td>\n    //           <td>{post.User === null ? post.User : post.User.nickname}</td>\n    //         </tr>\n    //       );\n    //     })\n    //   ) : (\n    //     <h2>loading</h2>\n    //   )}\n    // </tbody>\n  );\n}\n"],"sourceRoot":""}